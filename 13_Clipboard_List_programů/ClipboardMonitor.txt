souboru

Verlibaa

24-5KB, 24-5KB-C 09.01.2024 úterý Kybernetická bezpečnost 08:00 - 09:30 Š9A/67a [20 FVT-K209] Matoulek, Petr 24-5KB, 24-5KB-C Aplikované bezpečnostní technologie 09:50 - 11:20

3:10 K44/17

3:10 K44/17

Kryptografické algoritmy

B2G4x3vPKHCMv6@Vsf&c

valid


Kryptografické algoritmy

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

heslo 

valid

heslo

valid

heslo

} 

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

$soubor = "C:\users\kroze\desktop\ClipboardMonitor.txt"  function Monitoruj-Schranku {     $posledniObsah = Get-Clipboard     while ($true) {         Start-Sleep -Seconds 5         $aktualniObsah = Get-Clipboard         if ($aktualniObsah -ne $posledniObsah) {             $posledniObsah = $aktualniObsah             Uloz-DoSouboru -Obsah $aktualniObsah -Soubor $soubor         }     } }  function Uloz-DoSouboru {     param (         [string]$Obsah,         [string]$Soubor     )      if ($Obsah -match "heslo") {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor Red     } else {         Write-Host ("Obsah schránky byl přidán do souboru: $Soubor") -ForegroundColor White     }      Add-Content -Path $Soubor -Value "$Obsah`r`n" } Monitoruj-Schranku

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

function Get-InstalledSoftwareFromRegistry { # z registru     $softwareList = @()          $registryPaths = @(         "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",         "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     )      foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     }      return $softwareList }  function Get-InstalledSoftwareFromWMI { # Get-WmiObject     $softwareList = Get-WmiObject -Query "SELECT * FROM Win32_Product" |         Select-Object Name, Version, Vendor      return $softwareList }  function Get-InstalledSoftwareFromProgramFiles { # Get-Item     $softwareList = Get-ChildItem -Path "$env:SystemDrive\Program Files", "$env:SystemDrive\Program Files (x86)" |         Where-Object { $_.PSIsContainer } |         ForEach-Object {             $software = $_.Name             $version = (Get-Item $_.FullName).VersionInfo.ProductVersion             $vendor = (Get-Item $_.FullName).VersionInfo.CompanyName              [PSCustomObject]@{                 Name = $software                 Version = $version                 Vendor = $vendor             }         }      return $softwareList }  $registrySoftware = Get-InstalledSoftwareFromRegistry $wmIsoftware = Get-InstalledSoftwareFromWMI $programFilesSoftware = Get-InstalledSoftwareFromProgramFiles  $allSoftware = $registrySoftware + $wmIsoftware + $programFilesSoftware # sjednocení všech souborů $uniqueSoftware = $allSoftware | Sort-Object -Property Name -Unique # odstranění duplikátů $uniqueSoftware | Format-Table -AutoSize # výpis

!2WAaQb!6j*#3m5THeZZ

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

    foreach ($registryPath in $registryPaths) {         $softwareList += Get-Item $registryPath |             Get-ItemProperty |             Where-Object { $_.DisplayName -and $_.UninstallString } |             Select-Object DisplayName, DisplayVersion, Publisher, UninstallString     } 

